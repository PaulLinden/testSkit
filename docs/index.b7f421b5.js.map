{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-c178de01876b572a.js","src/modules/start.js","src/modules/player.js","src/modules/data.js","src/modules/game.js","node_modules/@parcel/runtime-js/lib/runtime-8693c8fa7b0e5b38.js","node_modules/@parcel/runtime-js/lib/runtime-b91b29efe71487ed.js","node_modules/@parcel/runtime-js/lib/runtime-2ba5da9084d05c80.js","src/modules/main.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"jaqnt\\\":\\\"index.b7f421b5.js\\\",\\\"hTbNP\\\":\\\"rock.76aa5461.png\\\",\\\"iXEgO\\\":\\\"paper.6668c1b3.png\\\",\\\"kuWW7\\\":\\\"scissors.a85c5b73.png\\\"}\"));","import { Player } from './player.js';\r\n\r\nconst player = new Player('Player', 0);\r\n\r\nfunction setupGameStart() {\r\n    addFormListener();\r\n}\r\n\r\nfunction addFormListener() {\r\n  \r\n    const form = document.querySelector('form');\r\n\r\n    form.addEventListener('submit', (event) => {\r\n        event.preventDefault();\r\n\r\n        const nameInput = document.querySelector('#playerName');\r\n        \r\n        if (nameInput.value != '') { \r\n        player.setName(nameInput.value);\r\n        }\r\n        else {\r\n            player.setName('buffoon');\r\n        }\r\n        \r\n        const menu = document.querySelector(\"#menu\");\r\n        menu.className = 'hidden';\r\n    });\r\n}\r\n\r\nexport { setupGameStart }\r\nexport{ player } ","export { Player }\r\n\r\nclass Player {\r\n    #playerName;\r\n    #playerScore;\r\n\r\n    constructor(nameArg, scoreArg) {\r\n        this.#playerName = nameArg;\r\n        this.#playerScore = scoreArg;\r\n    }\r\n\r\n    getName() {\r\n        return this.#playerName;\r\n    }\r\n    getScore() {\r\n        return this.#playerScore;\r\n    }\r\n\r\n    setName(name) {\r\n        this.#playerName = name;\r\n    }\r\n\r\n    setScore(score) {\r\n        this.#playerScore = score;\r\n    }\r\n\r\n}","// Array to store the high scores\r\nconst highScoreNames = [];\r\nconst highScoreScores = [];\r\n\r\n// Get the ordered list element from the HTML\r\nconst orderdList = document.querySelector('ol');\r\n\r\n// Function to fetch high-score data from Firebase\r\nasync function fetchHighScoreData() {\r\n    try {\r\n        const url = 'https://r-p-s-2c0f0-default-rtdb.europe-west1.firebasedatabase.app/high-score.json';\r\n        const response = await fetch(url);\r\n        console.log(response);\r\n        const data = await response.json();\r\n        console.log(data);\r\n        return data;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        throw new Error('Failed to fetch high score data');\r\n    }\r\n}\r\n\r\n// Function to update the high-score list on Firebase\r\nasync function putToFirebase(name, score) {\r\n    try {\r\n        const data = await fetchHighScoreData();\r\n\r\n        // Iterate through the top 5 high scores\r\n        for (let i = 1; i <= 5; i++) {\r\n            if (score > data[i].score) {\r\n                updateHighscoreList(name, score, i);\r\n                break;\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n// Function to create the high-score list on the page\r\nfunction createHighScoreListandDisplay(data) {\r\n    try {\r\n        // Iterate through the top 5 high scores\r\n        for (let i = 1; i <= 5; i++) {\r\n            // Add the name and score to their respective arrays\r\n            highScoreNames.push(data[i].name);\r\n            highScoreScores.push(data[i].score);\r\n        }\r\n\r\n        // Clear the ordered list element\r\n        orderdList.replaceChildren();\r\n\r\n        // Iterate through the names and scores arrays to create the list items\r\n        for (let i = 0; i < 5; i++) {   \r\n            const listItem = document.createElement('li');\r\n            listItem.textContent = `${highScoreNames[i]} : ${highScoreScores[i]}`;\r\n            orderdList.appendChild(listItem);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n// Function to update the high score list on Firebase and the page\r\nasync function updateHighscoreList(name, score, i) {\r\n    try {\r\n        // Set the URL for the high score to update\r\n        const url = `https://r-p-s-2c0f0-default-rtdb.europe-west1.firebasedatabase.app/high-score/${i}.json`;\r\n\r\n        // Create the new high score object to be sent to Firebase\r\n        const newHighScore = {\r\n            \"name\": name,\r\n            \"score\": score\r\n        };\r\n\r\n        // Set the options for the fetch request\r\n        const options = {\r\n            method: 'PUT',\r\n            body: JSON.stringify(newHighScore),\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        };\r\n\r\n        // Send the fetch request to Firebase to update the high score\r\n        const response = await fetch(url, options);\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        // Update the local names and scores arrays\r\n        highScoreNames.splice(i - 1, 0, name);\r\n        highScoreScores.splice(i - 1, 0, score);\r\n\r\n        // Remove the last element from the arrays\r\n        highScoreNames.pop();\r\n        highScoreScores.pop();\r\n\r\n        const newListItem = document.createElement('li');\r\n        newListItem.textContent = `${name}: ${score}`;\r\n\r\n        // Insert the new list item into the correct position\r\n        const listItems = orderdList.querySelectorAll('li');\r\n        if (listItems.length >= i) {\r\n            orderdList.insertBefore(newListItem, listItems[i - 1]);\r\n        } else {\r\n            orderdList.appendChild(newListItem);\r\n        }\r\n\r\n        // Remove any additional list items if there are more than 5\r\n        if (listItems.length > 4) {\r\n            orderdList.removeChild(listItems[listItems.length - 1]);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport { fetchHighScoreData, putToFirebase, createHighScoreListandDisplay }\r\n\r\n","import { player } from './start.js';\r\nimport { fetchHighScoreData, putToFirebase, createHighScoreListandDisplay } from './data.js';\r\n\r\n// Define image IDs for rock, paper, and scissors\r\nconst imgIds = ['rock', 'paper', 'scissors'];\r\n\r\nconst resultDisplay = document.querySelector('#result');\r\n\r\n// Initialize score to 0\r\nlet score = 0;\r\n\r\n//Collects functions for easier export\r\nfunction playGame() {\r\n\r\n    // Select the game container and apply fadeIn animation\r\n    const gameContainer = document.querySelector('#game');\r\n    setTimeout(function () {\r\n        displayHighscores();\r\n        setImageUrls();\r\n        addEventListenersToImages();\r\n        updatePlayerName();\r\n        gameContainer.className = 'fadeIn'\r\n    }, 1000);\r\n\r\n    // Call quitGame function to add event listener to quit button\r\n    quitGame();\r\n}\r\n\r\n// Function to set image URLs to the rock, paper, and scissors images\r\nfunction setImageUrls() {\r\n\r\n    // Select all image elements\r\n    const images = document.querySelectorAll('img');\r\n\r\n    // Create an array of URLs for the rock, paper, and scissors images\r\n    const imageUrls = [\r\n        new URL('../media/rock.png', import.meta.url),\r\n        new URL('../media/paper.png', import.meta.url),\r\n        new URL('../media/scissors.png', import.meta.url)\r\n    ];\r\n\r\n    // Loop through each image and set its src attribute to the corresponding image URL\r\n    images.forEach((img, index) => {\r\n        img.src = imageUrls[index].href;\r\n    });\r\n}\r\n\r\n// Function to add event listeners to the rock, paper, and scissors images\r\nfunction addEventListenersToImages() {\r\n\r\n    // Select all image elements\r\n    const images = document.querySelectorAll('img');\r\n\r\n    // Set timeout duration to 1.5 second\r\n    const timeoutDuration = 1500; \r\n    let timerId;\r\n\r\n    // Loop through each image and add a click event listener\r\n    images.forEach((img, index) => {\r\n        \r\n        // If the timer is already running, return without executing the rest of the code\r\n        img.addEventListener('click', () => {\r\n            if (timerId) {\r\n                return;\r\n            }\r\n\r\n             // Change the class of the clicked image to 'playerImg'\r\n            img.className = 'playerImg';\r\n\r\n            // Get the player's choice based on the index of the clicked image\r\n            let playerChoice = imgIds[index];\r\n\r\n            // Start the timer and execute the decideWinner function after the timeout duration\r\n            timerId = setTimeout(() => {\r\n\r\n               // Get the computer's choice\r\n                let computerChoice = getComputerChoice();\r\n\r\n                // Change the class of the computer's image to 'compImg'\r\n                let computerImage = document.querySelector(`#${computerChoice}`);\r\n                computerImage.className = 'compImg';\r\n\r\n                // Call the decideWinner function to determine the winner and update the score\r\n                decideWinner(playerChoice, computerChoice);\r\n\r\n                // Reset the image styles after the timeout duration\r\n                setTimeout(() => {\r\n                    resetImageStyles();\r\n                    resultDisplay.textContent = '';\r\n                    timerId = null;\r\n                }, timeoutDuration);\r\n\r\n            }, timeoutDuration);\r\n        });\r\n    });\r\n}\r\n\r\n// Function to determine the computer's choice\r\nfunction getComputerChoice() {\r\n    // Generate a random number from 0 to 2\r\n    let randomNumber = Math.round(Math.random() * 2);\r\n    \r\n    // Return the corresponding image ID from the array\r\n    return imgIds[randomNumber];\r\n}\r\n\r\n//Function that contains logic for finding winner\r\nfunction decideWinner(playerChoice, computerChoice) {\r\n\r\n    // Check if the player wins\r\n    if (playerChoice === imgIds[1] && computerChoice == imgIds[0] || playerChoice === imgIds[2] && computerChoice == imgIds[1] || playerChoice === imgIds[0] && computerChoice == imgIds[2]) {\r\n        score++;\r\n        resultDisplay.textContent = 'You win!';\r\n    }\r\n    else if(playerChoice === computerChoice) {// Check if it's a tie\r\n        resultDisplay.textContent = 'Tie!';\r\n    }\r\n    else {// If the player loses\r\n        // Send the player's name and score to Firebase\r\n        putToFirebase(player.getName(), player.getScore());\r\n        // Reset the score to 0\r\n        score = 0;\r\n        resultDisplay.textContent = 'You Lose!';\r\n    }\r\n    console.log(score)\r\n    // Update the player's score and display it\r\n    player.setScore(score);\r\n    updateScoreDisplay(score);\r\n}\r\n\r\n// Resets styles on all images\r\nfunction resetImageStyles() {\r\n    const images = document.querySelectorAll('img');\r\n\r\n    images.forEach(image => {\r\n        image.className = '';\r\n    });\r\n}\r\n\r\n// Updates the score display in the h3 element\r\nfunction updateScoreDisplay(score) {\r\n    const scoreDisplay = document.querySelector('h3');\r\n    scoreDisplay.textContent = `score: ${score}`;\r\n}\r\n\r\n// Updates the player's name in the h1 element\r\nfunction updatePlayerName() {\r\n    const playerNameHeader = document.querySelector('#player');\r\n    playerNameHeader.textContent = player.getName();\r\n}\r\n\r\n// Fetches the high-score data from Firebase and creates a list of high-scores\r\nfunction displayHighscores() {\r\n    fetchHighScoreData()\r\n        .then(data => {\r\n            createHighScoreListandDisplay(data);\r\n        });\r\n}\r\n// Quits the game and returns to the main menu\r\nfunction quitGame() {\r\n    const quitButton = document.querySelector('#quit');\r\n    quitButton.addEventListener('click', () => {\r\n\r\n        // Resets score display\r\n        updateScoreDisplay(0)\r\n\r\n        // Hide the game container\r\n        const gameContainer = document.querySelector(\"#game\");\r\n        gameContainer.className = 'hidden';\r\n\r\n        // Show the main menu\r\n        const menu = document.querySelector(\"#menu\");\r\n        menu.className = '';\r\n    });\r\n}\r\n\r\nexport { playGame }","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hTbNP\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"iXEgO\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"kuWW7\")).toString();","import { setupGameStart} from './start.js';\r\nimport { playGame } from './game.js';\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  setupGameStart();\r\n});\r\n\r\n\r\nconst buttons = document.querySelectorAll('button');\r\n\r\nbuttons.forEach(button => {\r\n  button.addEventListener('click', () => {\r\n    // When player submits name game starts\r\n    if (button.value === 'submit') {\r\n      playGame();\r\n    }\r\n  \r\n    // Returns back to menu\r\n    if (button.value === 'quit') {\r\n      setupGameStart();\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$a869accb4cfcb4cb$export$615455393ee443ca","playerName","playerScore","constructor","nameArg","scoreArg","this","getName","getScore","setName","name","setScore","score","$a869accb4cfcb4cb$export$42cb58da5f92ec23","document","querySelector","addEventListener","event","preventDefault","nameInput","value","className","$17e25708cb04b9b0$var$highScoreNames","$17e25708cb04b9b0$var$highScoreScores","$17e25708cb04b9b0$var$orderdList","async","$17e25708cb04b9b0$export$272020d829f345d","url","response","fetch","console","log","data","json","error","$17e25708cb04b9b0$export$5e904bb7ed132742","$17e25708cb04b9b0$var$updateHighscoreList","newHighScore","options","method","body","stringify","headers","splice","pop","newListItem","createElement","textContent","listItems","querySelectorAll","insertBefore","appendChild","removeChild","$efff50eca450a049$var$imgIds","$efff50eca450a049$var$resultDisplay","$efff50eca450a049$var$score","$efff50eca450a049$export$374e00631f623609","gameContainer","setTimeout","then","push","replaceChildren","listItem","images","imageUrls","forEach","img","index","src","href","$efff50eca450a049$var$setImageUrls","timeoutDuration","timerId","playerChoice","computerChoice","randomNumber","Math","round","random","$efff50eca450a049$var$getComputerChoice","$efff50eca450a049$var$updateScoreDisplay","$efff50eca450a049$var$decideWinner","image","$efff50eca450a049$var$resetImageStyles","$efff50eca450a049$var$addEventListenersToImages","$ab49ccc895f5e08a$exports","URL","resolve","toString","$74583f4760aab42b$exports","$856b524de3ca1193$exports","button"],"version":3,"file":"index.b7f421b5.js.map"}